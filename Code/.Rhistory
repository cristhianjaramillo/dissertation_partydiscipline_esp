base$party_affiliation <-  factor(base$party_affiliation, levels = c(0,1), labels = c("No", "Yes"))
# Standarization
base_b <- base %>%
mutate(pol_experience_std = as.numeric(scale(pol_experience)),
number_parties_std = as.numeric(scale(number_parties)),
age_std = as.numeric(scale(age)),
prop_votes_std = as.numeric(scale(prop_votes)))
# Handling exact 1 values by subtracting a small constant
base_b$party_discipline_adjusted <- ifelse(base_b$party_discipline == 1, 1 - 0.001, base_b$party_discipline)
summary(base_b$party_discipline_adjusted)
#### Descriptive analysis ####
mu <- ddply(base_b, "party_affiliation_plot", summarise, grp.mean=mean(party_discipline))
# Creating ypos for the location of the points
base_b$ypos <- NA
base_b$ypos[base_b$party_affiliation== "No"] <- 0.03
base_b$ypos[base_b$party_affiliation== "Yes"] <- 0.06
density_plot <- ggplot(base_b, aes(x=party_discipline, color=party_affiliation_plot)) +
geom_density() +
geom_point(data=base_b, aes(x= party_discipline, y= ypos, colour= party_affiliation_plot), alpha=0.5) +
labs(
x = "\nParty discipline",
y = "\nDensity",
color = "Party affiliation"
) +
scale_x_continuous(expand = c(0,0), limits = c(0,1.01)) +
scale_y_continuous(expand = c(0,0)) +
geom_vline(data=mu, aes(xintercept=grp.mean, color=party_affiliation_plot),
linetype="dashed") +
scale_color_brewer(palette="Set2") +
theme(legend.position = "none") +
theme_minimal()
ggsave(filename = "../Figures/density_plot.jpg",
plot = density_plot,
width = 10, height = 6, units = "in")
#### Fitting regression 1 ####
beta_model1 <- betareg(party_discipline_adjusted ~
party_affiliation,
data = base_b)
summary(beta_model1)
beta_model1 <- tidy(beta_model1)
coefs_1 <- beta_model1 %>%
filter(term != "(Intercept)") %>%
filter(term != "(phi)") %>%
mutate(lwr = estimate - (1.96 * std.error),
upr = estimate + (1.96 * std.error)) %>%
mutate(term = dplyr::recode(term,
`party_affiliationYes` = "Party affiliation (Yes)")) %>%
arrange(estimate) %>%
mutate(term = factor(term,levels = unique(term))) %>%
mutate(same_sign = ifelse(sign(lwr) == sign(upr), 1, 0)) %>%
mutate(model = "Model 1")
#### Fitting regression 2 ####
beta_model2 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender,
data = base_b)
summary(beta_model2)
beta_model2 <- tidy(beta_model2)
coefs_2 <- beta_model2 %>%
filter(term != "(Intercept)") %>%
filter(term != "(phi)") %>%
mutate(lwr = estimate - (1.96 * std.error),
upr = estimate + (1.96 * std.error)) %>%
mutate(term = dplyr::recode(term,
`party_affiliationYes` = "Party affiliation (Yes)",
`genderMale` = "Gender (Male)")) %>%
arrange(estimate) %>%
mutate(term = factor(term,levels = unique(term))) %>%
mutate(same_sign = ifelse(sign(lwr) == sign(upr), 1, 0)) %>%
mutate(model = "Model 2")
#### Fitting regression 3 ####
beta_model3 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected,
data = base_b)
summary(beta_model3)
beta_model3 <- tidy(beta_model3)
coefs_3 <- beta_model3 %>%
filter(term != "(Intercept)") %>%
filter(term != "(phi)") %>%
mutate(lwr = estimate - (1.96 * std.error),
upr = estimate + (1.96 * std.error)) %>%
mutate(term = dplyr::recode(term,
`party_affiliationYes` = "Party affiliation (Yes)",
`genderMale` = "Gender (Male)",
`re_electedYes` = "Re-elected (Yes)")) %>%
arrange(estimate) %>%
mutate(term = factor(term,levels = unique(term))) %>%
mutate(same_sign = ifelse(sign(lwr) == sign(upr), 1, 0)) %>%
mutate(model = "Model 3")
#### Fitting regression 4 ####
beta_model4 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected +
role,
data = base_b)
summary(beta_model4)
beta_model4 <- tidy(beta_model4)
coefs_4 <- beta_model4 %>%
filter(term != "(Intercept)") %>%
filter(term != "(phi)") %>%
mutate(lwr = estimate - (1.96 * std.error),
upr = estimate + (1.96 * std.error)) %>%
mutate(term = dplyr::recode(term,
`party_affiliationYes` = "Party affiliation (Yes)",
`genderMale` = "Gender (Male)",
`roleYes` = "Role (Yes)",
`re_electedYes` = "Re-elected (Yes)")) %>%
arrange(estimate) %>%
mutate(term = factor(term,levels = unique(term))) %>%
mutate(same_sign = ifelse(sign(lwr) == sign(upr), 1, 0)) %>%
mutate(model = "Model 4")
#### Fitting regression 5 ####
beta_model5 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected +
role +
pol_experience_std,
data = base_b)
summary(beta_model5)
beta_model5 <- tidy(beta_model5)
coefs_5 <- beta_model5 %>%
filter(term != "(Intercept)") %>%
filter(term != "(phi)") %>%
mutate(lwr = estimate - (1.96 * std.error),
upr = estimate + (1.96 * std.error)) %>%
mutate(term = dplyr::recode(term,
`party_affiliationYes` = "Party affiliation (Yes)",
`genderMale` = "Gender (Male)",
`roleYes` = "Role (Yes)",
`re_electedYes` = "Re-elected (Yes)",
`pol_experience_std` = "Political experience (Std)")) %>%
arrange(estimate) %>%
mutate(term = factor(term,levels = unique(term))) %>%
mutate(same_sign = ifelse(sign(lwr) == sign(upr), 1, 0)) %>%
mutate(model = "Model 5")
#### Fitting regression 6 ####
beta_model6 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected +
role +
pol_experience_std +
age_std,
data = base_b)
summary(beta_model6)
beta_model6 <- tidy(beta_model6)
coefs_6 <- beta_model6 %>%
filter(term != "(Intercept)") %>%
filter(term != "(phi)") %>%
mutate(lwr = estimate - (1.96 * std.error),
upr = estimate + (1.96 * std.error)) %>%
mutate(term = dplyr::recode(term,
`party_affiliationYes` = "Party affiliation (Yes)",
`genderMale` = "Gender (Male)",
`roleYes` = "Role (Yes)",
`re_electedYes` = "Re-elected (Yes)",
`pol_experience_std` = "Political experience (Std)",
`age_std` = "Age (Std)",)) %>%
arrange(estimate) %>%
mutate(term = factor(term,levels = unique(term))) %>%
mutate(same_sign = ifelse(sign(lwr) == sign(upr), 1, 0)) %>%
mutate(model = "Model 6")
#### Fitting regression 7 ####
beta_model7 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected +
role +
pol_experience_std +
age_std +
prop_votes_std,
data = base_b)
summary(beta_model7)
beta_model7 <- tidy(beta_model7)
coefs_7 <- beta_model7 %>%
filter(term != "(Intercept)") %>%
filter(term != "(phi)") %>%
mutate(lwr = estimate - (1.96 * std.error),
upr = estimate + (1.96 * std.error)) %>%
mutate(term = dplyr::recode(term,
`party_affiliationYes` = "Party affiliation (Yes)",
`genderMale` = "Gender (Male)",
`roleYes` = "Role (Yes)",
`re_electedYes` = "Re-elected (Yes)",
`age_std` = "Age (Std)",
`prop_votes_std` = "Proportion of votes (Std)",
`pol_experience_std` = "Political experience (Std)")) %>%
arrange(estimate) %>%
mutate(term = factor(term,levels = unique(term))) %>%
mutate(same_sign = ifelse(sign(lwr) == sign(upr), 1, 0)) %>%
mutate(model = "Model 7")
#### Fitting regression 8 ####
beta_model8 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected +
role +
pol_experience_std +
age_std +
prop_votes_std +
rule,
data = base_b)
summary(beta_model8)
beta_model8 <- tidy(beta_model8)
coefs_8 <- beta_model8 %>%
filter(term != "(Intercept)") %>%
filter(term != "(phi)") %>%
mutate(lwr = estimate - (1.96 * std.error),
upr = estimate + (1.96 * std.error)) %>%
mutate(term = dplyr::recode(term,
`party_affiliationYes` = "Party affiliation (Yes)",
`genderMale` = "Gender (Male)",
`roleYes` = "Role (Yes)",
`re_electedYes` = "Re-elected (Yes)",
`age_std` = "Age (Std)",
`prop_votes_std` = "Proportion of votes (Std)",
`ruleYes` = "Ruling party (Yes)",
`pol_experience_std` = "Political experience (Std)")) %>%
arrange(estimate) %>%
mutate(term = factor(term,levels = unique(term))) %>%
mutate(same_sign = ifelse(sign(lwr) == sign(upr), 1, 0)) %>%
mutate(model = "Model 8")
#### Graph model 8 ####
# The graph 8 has been selected given the AIC and BIC values in the "evaluation.R" file
coefs_8$term <- as.character(coefs_8$term)
desired_order <- c("Ruling party (Yes)",
"Proportion of votes (Std)",
"Age (Std)",
"Political experience (Std)",
"Role (Yes)",
"Re-elected (Yes)",
"Gender (Male)",
"Party affiliation (Yes)")
coefs_8$term <- factor(coefs_8$term, levels = desired_order)
plot_8 <- ggplot(coefs_8,
aes(x = term, y = estimate, ymin = lwr, ymax = upr)) +
geom_pointrange(aes(alpha = same_sign, color = factor(same_sign)),
size = 0.5, show.legend = FALSE) +
geom_hline(yintercept = 0, color = "red") +
geom_text(aes(x = as.numeric(as.factor(term)) + 0.25, y = estimate,
label = paste0(round(estimate, 2), ifelse(same_sign == 1, "*", ""))),
color = "black", size = 3, show.legend = FALSE) +
facet_wrap(~ model, nrow = 1) +
coord_flip() +
scale_y_continuous("\nEstimates of Predictors on Adjusted Party Discipline") +
scale_x_discrete("") +
scale_alpha_continuous(range = c(0.3, 1)) +
scale_color_manual(values = c("black", "black")) +
theme(panel.background = element_blank(),
# panel.grid.major = element_line(color = "gray", linetype = "dotted"),
panel.border = element_rect(color = "black", fill = NA),
axis.line = element_line(),
axis.ticks = element_blank(),
strip.background = element_rect(fill = "white"),
strip.text = element_text(face = "bold"),
axis.text.y = element_text(face = c(rep("plain", 7), rep("bold", 1))))
# Saving the plot as a JPG file
ggsave(filename = "../Figures/model8.jpg",
plot = plot_8,
width = 6, height = 5, units = "in")
#### Complete graph ####
# Creating a dataset for all variables
total <- rbind(coefs_1, coefs_2, coefs_3, coefs_4, coefs_5, coefs_6, coefs_7, coefs_8)
total$term <- as.character(total$term)
desired_order <- c("Ruling party (Yes)",
"Proportion of votes (Std)",
"Age (Std)",
"Political experience (Std)",
"Role (Yes)",
"Re-elected (Yes)",
"Gender (Male)",
"Party affiliation (Yes)")
total$term <- factor(total$term, levels = desired_order)
plot_full <- ggplot(total,
aes(x = term, y = estimate, ymin = lwr, ymax = upr)) +
geom_pointrange(aes(alpha = same_sign, color = factor(same_sign)),
size = 0.5, show.legend = FALSE) +
geom_hline(yintercept = 0, color = "red") +
geom_text(aes(x = as.numeric(as.factor(term)) + 0.4, y = estimate,
label = paste0(round(estimate, 2), ifelse(same_sign == 1, "*", ""))),
color = "black", size = 3, show.legend = FALSE) +
facet_wrap(~ model, nrow = 2) +
coord_flip() +
scale_y_continuous("\nEstimates of Predictors on Adjusted Party Discipline") +
scale_x_discrete("") +
scale_alpha_continuous(range = c(0.3, 1)) +
scale_color_manual(values = c("black", "black")) +
theme(panel.background = element_blank(),
# panel.grid.major = element_line(color = "gray", linetype = "dotted"),
panel.border = element_rect(color = "black", fill = NA),
axis.line = element_line(),
axis.ticks = element_blank(),
strip.background = element_rect(fill = "white"),
strip.text = element_text(face = "bold"),
axis.text.y = element_text(face = c(rep("plain", 7), rep("bold", 1))))
# Saving the plot as a JPG file
ggsave(filename = "../Figures/model_full.jpg",
plot = plot_full,
width = 9, height = 8, units = "in")
summary(beta_model8)
#### EVALUATION OF MODEL ####
library(betareg)
library(MASS)
library(xtable)
library(officer)
library(rvg)
library(kableExtra)
library(flextable)
library(car)
library(sandwich)
library(gridExtra)
library(caret)
library(readxl)
library(dplyr)
# Base
base <- read_excel("../Final data/Final_dataset.xlsx",
sheet = "FINAL_edited")
base <- base[,c(6,7,8,11,12,13,14,15,17,18)] #These are the columns needed for the regression
base <- as.data.frame(base)
names(base)
# Editing some of the variables
base$gender <-  factor(base$gender, levels = c(0,1), labels = c("Female", "Male"))
base$role <-  factor(base$role, levels = c(0,1), labels = c("No", "Yes"))
base$re_elected <-  factor(base$re_elected, levels = c(0,1), labels = c("No", "Yes"))
base$rule <-  factor(base$rule, levels = c(0,1), labels = c("No", "Yes"))
base$party_affiliation <-  factor(base$party_affiliation, levels = c(0,1), labels = c("No", "Yes"))
# Standarization
base_b <- base %>%
mutate(pol_experience_std = as.numeric(scale(pol_experience)),
number_parties_std = as.numeric(scale(number_parties)),
age_std = as.numeric(scale(age)),
prop_votes_std = as.numeric(scale(prop_votes)))
# Handling exact 1 values by subtracting a small constant
base_b$party_discipline_adjusted <- ifelse(base_b$party_discipline == 1, 1 - 0.001, base_b$party_discipline)
summary(base_b$party_discipline_adjusted)
# Models
beta_model1 <- betareg(party_discipline_adjusted ~
party_affiliation,
data = base_b)
beta_model2 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender,
data = base_b)
beta_model3 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected,
data = base_b)
beta_model4 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected +
role,
data = base_b)
beta_model5 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected +
role +
pol_experience_std,
data = base_b)
beta_model6 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected +
role +
pol_experience_std +
age_std,
data = base_b)
beta_model7 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected +
role +
pol_experience_std +
age_std +
prop_votes_std,
data = base_b)
beta_model8 <- betareg(party_discipline_adjusted ~
party_affiliation +
gender +
re_elected +
role +
pol_experience_std +
age_std +
prop_votes_std +
rule,
data = base_b)
#### Calculate AIC and BIC for each model ####
aic_values <- AIC(beta_model8, beta_model1, beta_model2, beta_model3, beta_model4,
beta_model5, beta_model6, beta_model7)
bic_values <- BIC(beta_model8, beta_model1, beta_model2, beta_model3, beta_model4,
beta_model5, beta_model6, beta_model7)
# Processing the data to make a table
aic_values$model <- rownames(aic_values)
rownames(aic_values) <- NULL
aic_values <- aic_values[,c(3,1,2)]
aic_values <- aic_values %>% mutate(model = dplyr::recode(model,
`beta_model8` = "Model 8 (full model)",
`beta_model1` = "Model 1",
`beta_model2` = "Model 2",
`beta_model3` = "Model 3",
`beta_model4` = "Model 4",
`beta_model5` = "Model 5",
`beta_model6` = "Model 6",
`beta_model7` = "Model 7"))
bic_values$model <- rownames(bic_values)
rownames(bic_values) <- NULL
bic_values <- bic_values[,c(3,1,2)]
bic_values <- bic_values %>% mutate(model = dplyr::recode(model,
`beta_model8` = "Model 8 (full model)",
`beta_model1` = "Model 1",
`beta_model2` = "Model 2",
`beta_model3` = "Model 3",
`beta_model4` = "Model 4",
`beta_model5` = "Model 5",
`beta_model6` = "Model 6",
`beta_model7` = "Model 7"))
aic_values$BIC <- bic_values$BIC
aic_values$df <- NULL
colnames(aic_values)[1] ="Model"
final_table <- aic_values
# This is the final table with AIC and BIC values
final_table
#### Further evaluation for model 8 ####
# Calculating residuals
residuals <- residuals(beta_model8)
par(mfrow = c(1, 3))  # 1 rows, 3 columns
# Residuals vs. Fitted plot
plot1 <- plot(predict(beta_model8, type = "response"), residuals,
xlab = "Fitted Values", ylab = "Residuals",
main = "Residuals vs. Fitted")
# Normal Q-Q plot of residuals
plot2 <- qqnorm(residuals)
qqline(residuals)
# Calculate the standardized residuals
bread <- bread(beta_model8)
std_residuals <- residuals(beta_model8) / sqrt(diag(bread))
# Scale-Location plot
plot3 <- plot(predict(beta_model8, type = "response"), sqrt(abs(std_residuals)),
xlab = "Fitted Values", ylab = "Square Root of Standardized Residuals",
main = "Scale-Location Plot")
# Save the combined plot as a JPG file with dimensions in inches
jpg_file <- "../Figures/evaluation.jpg"
dev.print(jpeg, file = jpg_file, width = 248.7, height = 144.6, units = "mm", res = 300)
dev.off()
# Creating indices for cross-validation
set.seed(123)  # For reproducibility
folds <- createFolds(base_b$party_discipline_adjusted, k = 10)  # 10-fold cross-validation
# Looping for cross-validation
# An empty vector to store cross-validated predictions
cv_predictions <- rep(NA, nrow(base_b))
for (i in seq_along(folds)) {
# Training and testing datasets
train_indices <- unlist(folds[-i])
test_indices <- folds[[i]]
train_data <- base_b[train_indices, ]
test_data <- base_b[test_indices, ]
# Fit beta regression model on the training data
model <- betareg(party_discipline_adjusted ~ party_affiliation + gender + re_elected +
role + pol_experience_std + age_std + prop_votes_std + rule,
data = train_data)
# Predict on the testing data
cv_predictions[test_indices] <- predict(model, newdata = test_data, type = "response")
}
# Calculate cross-validated MSE
cv_mse <- mean((cv_predictions - base_b$party_discipline_adjusted)^2)
cv_mse # Result: 0.03152845
final_table
summary(beta_model8)$phi
phi_estimates <- summary(beta_model8)$phi
print(phi_estimates)
beta_model8
# Get the summary of the model
model_summary8 <- summary(beta_model8)
model_summary8
model_summary1 <- summary(beta_model1)
model_summary1
model_summary2 <- summary(beta_model2)
model_summary3 <- summary(beta_model3)
model_summary4 <- summary(beta_model4)
model_summary5 <- summary(beta_model5)
model_summary6 <- summary(beta_model6)
model_summary7 <- summary(beta_model7)
model_summary8 <- summary(beta_model8)
model_summary2
model_summary3 <- summary(beta_model3)
model_summary3
model_summary4 <- summary(beta_model4)
model_summary4
model_summary5 <- summary(beta_model5)
model_summary5
model_summary6 <- summary(beta_model6)
model_summary6
model_summary6 <- summary(beta_model6)
model_summary6
model_summary7 <- summary(beta_model7)
model_summary7
model_summary8 <- summary(beta_model8)
model_summary8
model_summary1
model_summary2
model_summary3
model_summary4
model_summary5
model_summary6
model_summary7
model_summary8
